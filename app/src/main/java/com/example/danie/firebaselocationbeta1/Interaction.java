package com.example.danie.firebaselocationbeta1;

import android.content.Context;
import android.icu.text.SimpleDateFormat;
import android.support.annotation.NonNull;
import android.util.Log;

import com.google.android.gms.tasks.OnCompleteListener;
import com.google.android.gms.tasks.OnFailureListener;
import com.google.android.gms.tasks.OnSuccessListener;
import com.google.android.gms.tasks.Task;
import com.google.firebase.auth.FirebaseAuth;
import com.google.firebase.firestore.CollectionReference;
import com.google.firebase.firestore.DocumentReference;
import com.google.firebase.firestore.DocumentSnapshot;
import com.google.firebase.firestore.FieldValue;
import com.google.firebase.firestore.FirebaseFirestore;
import com.google.firebase.firestore.FirebaseFirestoreException;
import com.google.firebase.firestore.GeoPoint;
import com.google.firebase.firestore.QuerySnapshot;
import com.google.firebase.firestore.Transaction;
import com.google.firebase.firestore.WriteBatch;

import java.util.Date;
import java.util.HashMap;
import java.util.Locale;
import java.util.Map;

/**
 * Created by danie on 26/02/2018.
 */

public class Interaction {
    String phoneNumber;
    String uniqueId;
    Context context;
    // generating firestore instance
    // what is an instance??
    FirebaseFirestore db = FirebaseFirestore.getInstance();
    public Interaction(String phone_number,String unique_id, Context context_){
        //the phone number of current user
        phoneNumber=phone_number;
        // the unique id of current user generated by the firestore database
        uniqueId=unique_id;
        context=context_;
    }
    String TAG ="Interaction";
    public void selfData(){
        // creating interaction data
        // interaction data is mainly to give data regarding who the person has contacted
        // and which group they are in
        // to allow the phone to easily check and get relevant data

        // this is the docRef to the interaction collection with a document id of the user
        // to check whether the interaction data for that particular user has existed or not to prevent duplication
        // if it has not exist then try to create the interaction data
        final DocumentReference docRef2 = db.collection("interactions").document(uniqueId);

        docRef2.get().addOnCompleteListener(new OnCompleteListener<DocumentSnapshot>() {
            @Override
            public void onComplete(@NonNull Task<DocumentSnapshot> task) {
                if (task.isSuccessful()) {
                    // store the task received as document
                    DocumentSnapshot document = task.getResult();
                    // check whether document existed and not empty
                    if (document.exists()&&document != null) {
                        // if it has existed just log the data
                        Log.d(TAG, "DocumentSnapshot data: " + task.getResult().getData());
                    } else {
                        // if it has not existed then generate the document of interaction for the user
                        Map<String, Object> data1 = new HashMap<>();
                        data1.put("exist", true);
                        docRef2.set(data1);
                        Log.d(TAG, "Creating personal data");
                    }
                } else {
                    Log.d(TAG, "get failed with ", task.getException());
                }
            }
        });
    }
    public void getUniqueId(String phoneNumberAdd){
        // try to retrieve unique Id of the person the user wants to connect with
        //!!!!---!!!!
        // for know the other method of trying to generate the personal file for that particular person
        // is evoked here
        // due to the fact that there is a onCompleteListener that needs to be evoked before proceeding
        // Other  better method may be utilized in the future



        final CollectionReference userRef = db.collection("users");
        // Checking whether user has existed by querying
        userRef.whereEqualTo("phoneNumber",phoneNumberAdd).whereEqualTo("exist",true)
                .limit(1)
                .get().addOnCompleteListener(new OnCompleteListener<QuerySnapshot>() {
            @Override
            public void onComplete(@NonNull Task<QuerySnapshot> task) {
                if (task.isSuccessful()){
                    // Checking whether task is empty

                    //If empty than user did not exist
                    if(!task.getResult().isEmpty()){
                        for (DocumentSnapshot document : task.getResult()) {
                            // if the user exist try to get the unique id of that person
                            Log.d(TAG, document.getId() + " => " + document.getData());
                            // evoke another method to generate a personal document
                            // to allow both person to interact
                            connectPersonal(document.getId(),uniqueId);
                        }

                    }else {
                        Log.d(TAG, "Person does not exist");
                    }
                }
            }
        });
    }
    // old method to connect
    // just ignore for now
    // will be discarded in the near future
    public void connect(final String phoneNumberAdd){

        final DocumentReference docRef2 = db.collection("interactions").document(phoneNumberAdd);
        //final String TAG="docRef";
        docRef2.get().addOnCompleteListener(new OnCompleteListener<DocumentSnapshot>() {
            @Override
            public void onComplete(@NonNull Task<DocumentSnapshot> task) {
                if (task.isSuccessful()) {
                    DocumentSnapshot document = task.getResult();
                    // check whether document existed and not empty
                    if (document.exists()&&document != null) {
                        Date now = new Date();
                        String format ="yyyyMMddHHmmss";
                        SimpleDateFormat simpleDateFormat = new SimpleDateFormat(format, Locale.US);
                        Double formattedNow = Double.valueOf(simpleDateFormat.format(now));
                        Log.i("DateTime",String.valueOf(formattedNow));

                        // Trying to add user to firestore database
                        Map<String, Object> data1 = new HashMap<>();
                        data1.put(phoneNumber, formattedNow);
                        docRef2.update(data1);

                        Log.d(TAG, "DocumentSnapshot data: " + task.getResult().getData());
                        CollectionReference interactions = db.collection("interactions");
                        data1.clear();
                        //data1.put("exist", true);
                        data1.put(phoneNumberAdd, formattedNow);

                        interactions.document(phoneNumber).update(data1);

                    } else {

                        Log.d(TAG, "No such person");
                    }
                } else {
                    Log.d(TAG, "get failed with ", task.getException());
                }
            }
        });
    }
    public void connectPersonal(final String uniqueIdAdd, final String uniqueId){
        // create personal data for further interaction
        // get unique Id of people that needs to be added
        // for now evoked by get id method!!!!
        // a better way of doing it may be required

        final CollectionReference personalRef = db.collection("personal");
        // Checking whether personal interaction has existed by quering for both ids
        personalRef.whereEqualTo(uniqueId,true).whereEqualTo(uniqueIdAdd,true)
                .limit(1)
                .get().addOnCompleteListener(new OnCompleteListener<QuerySnapshot>() {
            @Override
            public void onComplete(@NonNull Task<QuerySnapshot> task) {
                if (task.isSuccessful()){
                    // Checking whether task is empty
                    //If empty than personal interaction data did not exist
                    if(!task.getResult().isEmpty()){
                        for (DocumentSnapshot document : task.getResult()) {

                            //Logging id of document if the id has existed
                            Log.d(TAG, document.getId() + " => " + document.getData());



                        }
                    }else {
                        Log.i(TAG,"Personal data between the two users does not exist in system");
                        // Trying to add personal to firestore database
                        // As personal data has not existed yet
                        // In the future the system must also update the interaction file of both users
                        Map<String, Object> data1 = new HashMap<>();
                        data1.put(uniqueId, true);
                        data1.put(uniqueIdAdd,true);
                        personalRef.add(data1).addOnSuccessListener(new OnSuccessListener<DocumentReference>() {
                            @Override
                            public void onSuccess(DocumentReference documentReference) {

                                String documentId=String.valueOf(documentReference.getId());


                                Log.i(TAG,"Document id "+documentId);


                            }
                        });




                    }
                }
            }
        });

    }

    // old method to connect to meetings
    // needs major modification
    // just ignore for now
    public void connectPersonalMeeting(final String documentId,final String phoneNumberAdd){

        final DocumentReference docRef2 = db.collection("interactions").document(phoneNumberAdd);
        //final String TAG="docRef";
        docRef2.get().addOnCompleteListener(new OnCompleteListener<DocumentSnapshot>() {
            @Override
            public void onComplete(@NonNull Task<DocumentSnapshot> task) {
                if (task.isSuccessful()) {
                    DocumentSnapshot document = task.getResult();
                    // check whether document existed and not empty
                    if (document.exists()&&document != null) {
                        Date now = new Date();
                        String format ="yyyyMMddHHmmss";
                        SimpleDateFormat simpleDateFormat = new SimpleDateFormat(format, Locale.US);
                        Double formattedNow = Double.valueOf(simpleDateFormat.format(now));
                        Log.i("DateTime",String.valueOf(formattedNow));

                        // Trying to add user to firestore database
                        Map<String, Object> data1 = new HashMap<>();
                        data1.put(documentId, formattedNow);
                        docRef2.update(data1);

                        Log.d(TAG, "DocumentSnapshot data: " + task.getResult().getData());
                        CollectionReference interactions = db.collection("interactions");
                        data1.clear();
                        //data1.put("exist", true);
                        data1.put(documentId, formattedNow);

                        interactions.document(phoneNumber).update(data1);

                    } else {

                        Log.d(TAG, "No such person");
                    }
                } else {
                    Log.d(TAG, "get failed with ", task.getException());
                }
            }
        });
    }

    // old method to connect to meetings
    // needs major modification
    // just ignore for now
    public void createPersonalMeeting(final String phoneNumberAdd){

        final CollectionReference colRef2 = db.collection("personal meetings");
        //final String TAG="docRef";
        GeoPoint meetingLocation =new GeoPoint(00,00);

        Date now = new Date();

        String format ="yyyyMMddHHmmss";
        SimpleDateFormat simpleDateFormat = new SimpleDateFormat(format, Locale.US);
        final Double formattedNow = Double.valueOf(simpleDateFormat.format(now));
        Log.i("DateTime",String.valueOf(formattedNow));

        // Trying to add user to firestore database
        Map<String, Object> data1 = new HashMap<>();
        data1.put("time", FieldValue.serverTimestamp());
        data1.put("location",meetingLocation);
        data1.put("created by",phoneNumber);
        data1.put("modified by",phoneNumber);
        data1.put(phoneNumber, formattedNow);
        data1.put(phoneNumberAdd,formattedNow);
        data1.put("created at",FieldValue.serverTimestamp());
        colRef2.add(data1).addOnSuccessListener(new OnSuccessListener<DocumentReference>() {
            @Override
            public void onSuccess(DocumentReference documentReference) {

                String documentId=String.valueOf(documentReference.getId());
                /*
                Map<String, Object> data2 = new HashMap<>();
                data2.put(phoneNumber, formattedNow);
                data2.put(phoneNumberAdd,formattedNow);
                colRef2.document(documentReference.getId()).collection("ids").add(data2);
                */

                Log.i(TAG,"Document id "+documentId);
                 connectPersonalMeeting(documentId,phoneNumberAdd);

            }
        });



    }
}
